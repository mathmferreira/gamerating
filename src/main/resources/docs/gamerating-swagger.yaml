openapi: 3.0.3
info:
  title: Game Rating API
  description: |-
    This is an API for rating Games and give your opinion about them.
    You just have to create your user and play with it.
    
    This API uses JWT for authentication, and it is required to access all the resources for each request.
    You can log in the application after you create your user, then get the token returned in the header of response to access the resources.
    
    ### This API allows you to:
    
    * Rating and comment games
    * Manage games for rating
    * View all the games that you rated
    * Manage your user
    
    Some useful links:
    - [The Game Rating API Repository](https://github.com/mathmferreira/gamerating)
    - [The source API definition for the Game Rating API](https://github.com/mathmferreira/gamerating/blob/main/src/main/resources/docs/gamerating-swagger.yaml)
  version: 1.0.0

servers:
  - url: https://localhost:8080
paths:
  /login:
    post:
      tags:
        - Login
      summary: Log in the system
      description: Log in an user in the system
      operationId: login
      requestBody:
        description: email and password for log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginForm'
      responses:
        '200':
          description: Success. Logged In.
          headers:
            Authorization:
              schema:
                type: string
              description: Bearer JWT
        '401':
          description: Unauthorized. Email or password incorrect.
  /v1/user:
    post:
      tags:
        - User
      summary: Creates a new user
      description: Creates a new user for access the API
      operationId: create_user
      requestBody:
        description: All the data of the user to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Created. The resource has been successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request. Some fields may be invalid or not in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidationError'
    get:
      tags:
        - User
      summary: Find all users using a filter
      description: Finds all users that matches with the given filters
      operationId: find_all_user
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page that you want
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            example: 10
          description: The number of elements in the page
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
          description: The direction of the order.
        - in: query
          name: orderBy
          schema:
            type: string
            default: id
          description: The page that you want
        - in: query
          name: filters
          schema:
            type: object
            properties:
              name:
                type: string
                example: Matheus Maia
              email:
                type: string
                format: email
                example: example@gmail.com
          style: form
          explode: true
      responses:
        '204':
          description: No Content. Ratings with the given filters not found.
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
              example: []
        '206':
          description: Success Partial Content. Returns the page of users that matched the filters
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
      security:
        - Authorization: []
          
  /v1/user/{userId}:
    get:
      tags:
        - User
      summary: Finds an user
      description: Finds the user that matches with the given ID
      operationId: find_by_id_user
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Success. Returns the respective user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The user has not been found.
      security:
        - Authorization: []
    
    put:
      tags:
        - User
      summary: Updates an user
      description: Updates completely an user that matches with the given ID. All the information of the user must be in the request body.
      operationId: full_update_user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: All the updated data of the user to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Success. Returns the respective user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The user has not been found.
      security:
        - Authorization: []
          
    patch:
      tags:
        - User
      summary: Updates an user
      description: Updates partialy an user that matches with the given ID. Only the information that will be updated must be in the request body.
      operationId: partial_update_user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: All the updated data of the user to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUser'
        required: true
      responses:
        '200':
          description: Success. Returns the respective user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The user has not been found.
      security:
        - Authorization: []
    
    delete:
      tags:
        - User
      summary: Deletes an user
      description: Deletes an user that matches with the given ID
      operationId: delete_user
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: Success. Nothing is returned.
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The user has not been found.
      security:
        - Authorization: []
        
  /v1/game:
    post:
      tags:
        - Game
      summary: Creates a new game
      description: Creates a new game for access the API
      operationId: create_game
      requestBody:
        description: All the data of the game to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '201':
          description: Created. The resource has been successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '400':
          description: Bad Request. Some fields may be invalid or not in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidationError'
      security:
        - Authorization: []
    
    get:
      tags:
        - Game
      summary: Find all games using a filter
      description: Finds all games that matches with the given filters
      operationId: find_all_game
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page that you want
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            example: 10
          description: The number of elements in the page
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
          description: The direction of the order.
        - in: query
          name: orderBy
          schema:
            type: string
            default: id
          description: The page that you want
        - in: query
          name: filters
          schema:
            type: object
            properties:
              title:
                type: string
                example: God of War
              email:
                type: string
                format: email
                example: example@gmail.com
          style: form
          explode: true
      responses:
        '204':
          description: No Content. Ratings with the given filters not found.
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGame'
              example: []
        '206':
          description: Success Partial Content. Returns the page of games that matched the filters
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGame'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
      security:
        - Authorization: []
  
  /v1/game/{gameId}:
    get:
      tags:
        - Game
      summary: Finds an game
      description: Finds the game that matches with the given ID
      operationId: find_by_id_game
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Success. Returns the respective game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The game has not been found.
      security:
        - Authorization: []
    
    put:
      tags:
        - Game
      summary: Updates an game
      description: Updates completely an game that matches with the given ID. All the information of the user must be in the request body.
      operationId: full_update_game
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        description: All the updated data of the game to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Success. Returns the respective game updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The game has not been found.
      security:
        - Authorization: []
          
    patch:
      tags:
        - Game
      summary: Updates an game
      description: Updates partialy an game that matches with the given ID. Only the information that will be updated must be in the request body.
      operationId: partial_update_game
      parameters:
        - $ref: '#/components/parameters/GameId'
      requestBody:
        description: All the updated data of the game to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialGame'
        required: true
      responses:
        '200':
          description: Success. Returns the respective game updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The game has not been found.
      security:
        - Authorization: []
    
    delete:
      tags:
        - Game
      summary: Deletes an game
      description: Deletes an game that matches with the given ID
      operationId: delete_game
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '204':
          description: Success. Nothing is returned.
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The game has not been found.
      security:
        - Authorization: []
        
  /v1/rating:
    post:
      tags:
        - Rating
      summary: Creates a new rating
      description: Creates a new rating for access the API
      operationId: create_rating
      requestBody:
        description: All the data of the rating to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '201':
          description: Created. The resource has been successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '400':
          description: Bad Request. Some fields may be invalid or not in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListValidationError'
      security:
        - Authorization: []
    
    get:
      tags:
        - Rating
      summary: Find all ratings using a filter
      description: Finds all ratings that matches with the given filters
      operationId: find_all_rating
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: The page that you want
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            example: 10
          description: The number of elements in the page
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
          description: The direction of the order.
        - in: query
          name: orderBy
          schema:
            type: string
            default: id
          description: The page that you want
        - in: query
          name: filters
          schema:
            type: object
            properties:
              value:
                type: integer
                example: 4
              comments:
                type: string
                example: An example of comment
              userId:
                type: integer
                example: 123
              gameId:
                type: integer
                example: 123
          style: form
          explode: true
      responses:
        '204':
          description: No Content. Ratings with the given filters not found.
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRating'
              example: []
        '206':
          description: Success Partial Content. Returns the page of ratings that matched the filters
          headers:
            currentPage:
              schema:
                type: integer
              description: Returned current page
            totalElements:
              schema:
                type: integer
              description: Total of elements in the page
            totalPages:
              schema:
                type: integer
              description: Total of pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRating'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
      security:
        - Authorization: []
  
  /v1/rating/{ratingId}:
    get:
      tags:
        - Rating
      summary: Finds an rating
      description: Finds the rating that matches with the given ID
      operationId: find_by_id_rating
      parameters:
        - $ref: '#/components/parameters/RatingId'
      responses:
        '200':
          description: Success. Returns the respective rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The rating has not been found.
      security:
        - Authorization: []
    
    put:
      tags:
        - Rating
      summary: Updates an rating
      description: Updates completely an rating that matches with the given ID. All the information of the user must be in the request body.
      operationId: full_update_rating
      parameters:
        - $ref: '#/components/parameters/RatingId'
      requestBody:
        description: All the updated data of the rating to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Success. Returns the respective rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The rating has not been found.
      security:
        - Authorization: []
          
    patch:
      tags:
        - Rating
      summary: Updates an rating
      description: Updates partialy an rating that matches with the given ID. Only the information that will be updated must be in the request body.
      operationId: partial_update_game
      parameters:
        - $ref: '#/components/parameters/RatingId'
      requestBody:
        description: All the updated data of the rating to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialRating'
        required: true
      responses:
        '200':
          description: Success. Returns the respective rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingResponse'
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The rating has not been found.
      security:
        - Authorization: []
    
    delete:
      tags:
        - Rating
      summary: Deletes an rating
      description: Deletes an rating that matches with the given ID
      operationId: delete_rating
      parameters:
        - $ref: '#/components/parameters/RatingId'
      responses:
        '204':
          description: Success. Nothing is returned.
        '401':
          description: Unauthorized. The Bearer Token is expired or is not in the request headers.
        '404':
          description: Not Found. The rating has not been found.
      security:
        - Authorization: []
        
components:
  parameters:
    UserId:
      name: userId
      in: path
      description: User ID
      required: true
      schema:
        type: integer
        format: int64
        
    GameId:
      name: gameId
      in: path
      description: Game ID
      required: true
      schema:
        type: integer
        format: int64
        
    RatingId:
      name: ratingId
      in: path
      description: Rating ID
      required: true
      schema:
        type: integer
        format: int64
      
  schemas:
    LoginForm:
      type: object
      properties:
        email:
          type: string
          example: example@gmail.com
        pass: 
          type: string
          example: secret
      required:
        - email
        - pass
  
    ValidationError:
      type: object
      properties: 
        fieldName: 
          type: string
          example: must not be blank
    ListValidationError:
      type: array
      items:
        $ref: '#/components/schemas/ValidationError'
          
    Id:
      properties:
        id:
          type: integer
          format: int64
          example: 123
          readOnly: true
      required:
        - id
        
    User:
      type: object
      properties:
        name:
          type: string
          example: Matheus Maia
        email:
          type: string
          format: email
          example: example@gmail.com
        pass:
          type: string
          example: secret
          writeOnly: true
          
    ListUser:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example:
        - name: "Name 1"
          email: "email1@gmail.com"
        - name: "Name 2"
          email: "email2@gmail.com"
          
    PartialUser:
      type: object
      properties:
        name:
          type: string
          example: Matheus Maia
          
    UserResponse: 
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/User'
    
    Game:
      type: object
      properties:
        title:
          type: string
          example: God of War
        description:
          type: string
          example: An example of description of the game
        genreType:
          type: string
          enum:
            - ACTION
            - ACTION_ADVENTURE
            - BOARD_CARD_GAME
            - PUZZLE
            - ROLE_PLAYING
            - SANDBOX
            - SIMULATION
            - STRATEGY
            - SPORTS
            - MMO
          example: ACTION_ADVENTURE
        releaseDate:
          type: string
          example: 2018-04-20
          
    ListGame:
      type: array
      items:
        $ref: '#/components/schemas/Game'
      example:
        - title: "God of War"
          description: "An description of the game"
          genreType: ACTION_ADVENTURE
          releaseDate: 2018-04-20
        - title: "Yu-Gi-Oh! Master Duel"
          description: "An description of the game"
          genreType: BOARD_CARD_GAME
          releaseDate: 2022-01-18
    
    PartialGame:
      type: object
      properties:
        description:
          type: string
          example: An example of description of the game
          
    GameResponse: 
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/Game'
        
    Rating:
      type: object
      properties:
        value:
          type: integer
          format: int64
          example: 4
        comments:
          type: string
          example: An example of comment
        userId:
          type: integer
          format: int64
          example: 123
        gameId:
          type: integer
          format: int64
          example: 123
    
    ListRating:
      type: array
      items:
        $ref: '#/components/schemas/Rating'
      example:
        - value: 3
          comments: "An example of comment"
        - value: 4
          comments: "An example of comment"
    
    PartialRating:
      type: object
      properties:
        comments:
          type: string
          example: An example of comment
          
    RatingResponse: 
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/Rating'
        
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      